const h=function(){const e=document.createElement("link").relList;return e&&e.supports&&e.supports("modulepreload")?"modulepreload":"preload"}(),m=function(n,e){return new URL(n,e).href},u={},g=function(e,t,c){if(!t||t.length===0)return e();const a=document.getElementsByTagName("link");return Promise.all(t.map(s=>{if(s=m(s,c),s in u)return;u[s]=!0;const i=s.endsWith(".css"),f=i?'[rel="stylesheet"]':"";if(!!c)for(let o=a.length-1;o>=0;o--){const l=a[o];if(l.href===s&&(!i||l.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${s}"]${f}`))return;const r=document.createElement("link");if(r.rel=i?"stylesheet":h,i||(r.as="script",r.crossOrigin=""),r.href=s,document.head.appendChild(r),i)return new Promise((o,l)=>{r.addEventListener("load",o),r.addEventListener("error",()=>l(new Error(`Unable to preload CSS for ${s}`)))})})).then(()=>e())};class y{constructor(e,t){this.status=e,typeof t=="string"?this.body={message:t}:t?this.body=t:this.body={message:`Error: ${e}`}}toString(){return JSON.stringify(this.body)}}class E{constructor(e,t){this.status=e,this.location=t}}export{y as H,E as R,g as _};
